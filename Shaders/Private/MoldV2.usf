#include "/Engine/Public/Platform.ush"

//--------------------------------------------------------------------------------------
// Structs
//--------------------------------------------------------------------------------------

struct AgentV2 {
	float2 position;
	float angle;
	int4 speciesMask;
	int speciesIndex;
};

struct SpeciesSetting {
	float moveSpeed;
	float turnSpeed;

	float sensorAngleDegrees;
	float sensorOffsetDst;
	int sensorSize;
	float4 colour;
};

//--------------------------------------------------------------------------------------
// Buffers
//--------------------------------------------------------------------------------------

RWStructuredBuffer<SpeciesSetting> SpeciesSettings;
RWStructuredBuffer<AgentV2> Agents;
RWTexture2D<float4> TrailMap;

//--------------------------------------------------------------------------------------
// Variables
//--------------------------------------------------------------------------------------

uint NumSpecies;
uint NumAgents;

int Width;
int Height;

float TrailWeight;

float DeltaTime;
float Time;

// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}


float sense(AgentV2 agent, SpeciesSetting settings, float sensorAngleOffset) {
	float sensor_angle = agent.angle + sensorAngleOffset;
	float2 sensor_direction = float2(cos(sensor_angle), sin(sensor_angle));

	float2 sensor_position = agent.position + sensor_direction * settings.sensorOffsetDst;
	int x_sensor_center = (int) sensor_position.x;
	int y_sensor_center = (int) sensor_position.y;

	float sum = 0;

	int4 sense_weight = agent.speciesMask * 2 - 1;

	for (int x_offset = -settings.sensorSize; x_offset <= settings.sensorSize; x_offset ++) {
		for (int y_offset = -settings.sensorSize; y_offset <= settings.sensorSize; y_offset ++) {
			int x_position = x_sensor_center + x_offset;
			int y_position = y_sensor_center + y_offset;
			if (x_position >= 0 && x_position < Width && y_sensor_center + y_offset >= 0 && y_position < Height) {
				int x_sample = min(Width - 1, max(0, x_position));
				int y_sample = min(Height - 1, max(0, y_position));
				sum += dot(sense_weight, TrailMap[int2(x_sample,y_sample)]);
			}
		}
	}

	return sum;
}

[numthreads(16,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= NumAgents) {
		return;
	}
	
	
	AgentV2 agent = Agents[id.x];
	SpeciesSetting settings = SpeciesSettings[agent.speciesIndex];
	float2 pos = agent.position;

	uint random = hash(pos.y * Width + pos.x + hash(id.x + Time * 100000));
	
	// Steer based on sensory data
	float sensorAngleRad = settings.sensorAngleDegrees * (3.1415 / 180);
	float weightForward = sense(agent, settings, 0);
	float weightLeft = sense(agent, settings, sensorAngleRad);
	float weightRight = sense(agent, settings, -sensorAngleRad);

	
	float randomSteerStrength = scaleToRange01(random);
	float turnSpeed = settings.turnSpeed * 2 * 3.1415;
	float angleOld = Agents[id.x].angle;
	
	// Continue in same direction
	if (weightForward > weightLeft && weightForward > weightRight) {
		Agents[id.x].angle = angleOld;
	}
	else if (weightForward < weightLeft && weightForward < weightRight) {
		Agents[id.x].angle = (randomSteerStrength - 0.5) * 2 * turnSpeed * DeltaTime + angleOld;
	}
	// Turn right
	else if (weightRight > weightLeft) {
		Agents[id.x].angle = randomSteerStrength * turnSpeed * DeltaTime - angleOld;
	}
	// Turn left
	else if (weightLeft > weightRight) {
		Agents[id.x].angle = randomSteerStrength * turnSpeed * DeltaTime+ angleOld;
	}
	
	
	// Update position
	float2 direction = float2(cos(agent.angle), sin(agent.angle));
	float2 newPos = agent.position + direction * DeltaTime *  settings.moveSpeed;

	
	// Clamp position to map boundaries, and pick new random move dir if hit boundary
	if (newPos.x < 0 || newPos.x >= Width || newPos.y < 0 || newPos.y >= Height) {
		random = hash(random);
		float randomAngle = scaleToRange01(random) * 2 * 3.1415;

		newPos.x = min(Width-1,max(0, newPos.x));
		newPos.y = min(Height-1,max(0, newPos.y));
		Agents[id.x].angle = randomAngle;
	}
	else {
		int2 coord = int2(newPos);
		float4 oldTrail = TrailMap[coord];
		TrailMap[coord] = min(10, oldTrail + agent.speciesMask * TrailWeight * DeltaTime);
	}
	
	Agents[id.x].position = newPos;
}

